package rina.onepop.club.client.module.exploit;

import me.rina.turok.util.TurokTick;
import net.minecraft.init.Items;
import net.minecraft.network.play.client.CPacketHeldItemChange;
import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
import net.minecraft.util.EnumHand;
import rina.onepop.club.api.module.Module;
import rina.onepop.club.api.module.impl.ModuleCategory;
import rina.onepop.club.api.module.registry.Registry;
import rina.onepop.club.api.setting.value.ValueBind;
import rina.onepop.club.api.setting.value.ValueBoolean;
import rina.onepop.club.api.setting.value.ValueNumber;
import rina.onepop.club.api.util.item.SlotUtil;
import rina.onepop.club.client.event.client.ClientTickEvent;
import rina.onepop.club.client.manager.network.HotBarManager;
import team.stiff.pomelo.impl.annotated.handler.annotation.Listener;

/**
 * @author SrRina
 * @since 14/10/2021 at 14:16
 **/
@Registry(name = "Silent Eat", tag = "SilentEat", description = "Silent eat...", category = ModuleCategory.EXPLOIT)
public class ModuleSilentEat extends Module {
    // Misc.
    public static ValueNumber settingCooldown = new ValueNumber("Cooldown", "Cooldown", "Delay cooldown for next eating.", 1250, 1, 4000);

    // Golden Apple.
    public static ValueBind settingGoldenApple = new ValueBind("Golden Apple", "GoldenApple", "Make you eat one golden apple.", -1);
    public static ValueBoolean settingAutoGoldenAppleEat = new ValueBoolean("Auto Golden Apple", "AutoGoldenApple", "Automatically eat for you.", false);

    // Chorus fruit.
    public static ValueBind settingChorusFruit = new ValueBind("Chorus Fruit", "ChorusFruit", "Make you eat one chorus fruit.", -1);
    public static ValueBoolean settingAutoChorusFruit = new ValueBoolean("Chorus Fruit", "ChorusFruit", "Automatically eat for you.", false);

    private boolean isGoldenAppleAte;
    private boolean isChorusFruitAte;

    private final TurokTick cooldownAfterEat = new TurokTick();
    private int queue;

    public boolean isGoldenAppleAte() {
        return isGoldenAppleAte;
    }

    public void setGoldenAppleAte(boolean goldenAppleAte) {
        isGoldenAppleAte = goldenAppleAte;
    }

    public boolean isChorusFruitAte() {
        return isChorusFruitAte;
    }

    public void setChorusFruitAte(boolean chorusFruitAte) {
        isChorusFruitAte = chorusFruitAte;
    }

    @Listener
    public void onClientTickEvent(ClientTickEvent event) {
        if (!this.isChorusFruitAte() || !this.isGoldenAppleAte()) {
            if (this.cooldownAfterEat.isPassedMS(settingCooldown.getValue().intValue())) {
                this.eating();
                this.reload();
            }
        }

        this.unsetAll();
    }

    public void reload() {
        if (HotBarManager.currentItem(HotBarManager.SERVER) != HotBarManager.currentItem(HotBarManager.CLIENT)) {
            mc.player.connection.sendPacket(new CPacketHeldItemChange(HotBarManager.currentItem(HotBarManager.CLIENT)));
        }
    }

    public void unsetAll() {
        settingChorusFruit.setValue(false);
        settingGoldenApple.setValue(false);

        if (!this.cooldownAfterEat.isPassedMS(settingCooldown.getValue().intValue())) {
            this.setChorusFruitAte(false);
            this.setGoldenAppleAte(false);
        }
    }

    public void eating() {
        if ((settingAutoChorusFruit.getValue() || settingChorusFruit.getValue()) && this.queue == 0) {
            int slot = SlotUtil.findItemSlotFromHotBar(Items.CHORUS_FRUIT);

            if (slot != -1) {
                mc.player.connection.sendPacket(new CPacketHeldItemChange(slot));
                mc.player.connection.sendPacket(new CPacketPlayerTryUseItem(EnumHand.MAIN_HAND));

                this.setChorusFruitAte(true);
            }

            this.queue = 1;
            this.cooldownAfterEat.reset();

            return;
        }

        if ((settingAutoGoldenAppleEat.getValue() || settingGoldenApple.getValue()) && this.queue == 1) {
            int slot = SlotUtil.findItemSlotFromHotBar(Items.GOLDEN_APPLE);

            if (slot != -1) {
                mc.player.connection.sendPacket(new CPacketHeldItemChange(slot));
                mc.player.connection.sendPacket(new CPacketPlayerTryUseItem(EnumHand.MAIN_HAND));

                this.setGoldenAppleAte(true);
            }

            this.queue = 0;
            this.cooldownAfterEat.reset();

            return;
        }

        if (this.queue < 1) {
            this.queue++;
        } else {
            this.queue--;
        }
    }
}
