package rina.onepop.club.client.module.exploit;

import me.rina.turok.util.TurokMath;
import me.rina.turok.util.TurokTick;
import net.minecraft.init.SoundEvents;
import net.minecraft.item.ItemChorusFruit;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.server.SPacketPlayerPosLook;
import net.minecraft.network.play.server.SPacketSoundEffect;
import net.minecraft.util.math.BlockPos;
import rina.onepop.club.Onepop;
import rina.onepop.club.api.module.Module;
import rina.onepop.club.api.module.impl.ModuleCategory;
import rina.onepop.club.api.module.registry.Registry;
import rina.onepop.club.api.setting.value.ValueBind;
import rina.onepop.club.api.setting.value.ValueBoolean;
import rina.onepop.club.api.setting.value.ValueColor;
import rina.onepop.club.api.setting.value.ValueNumber;
import rina.onepop.club.api.util.client.NullUtil;
import rina.onepop.club.api.util.render.RenderUtil;
import rina.onepop.club.client.event.client.RunTickEvent;
import rina.onepop.club.client.event.network.PacketEvent;
import team.stiff.pomelo.impl.annotated.handler.annotation.Listener;

import java.awt.*;
import java.util.ArrayList;
import java.util.List;

/**
 * @author SrRina
 * @since 07/10/2021 at 21:22
 **/
@Registry(name = "Chorus Tweaks", tag = "ChorusTweaks", description = "Handler very better the teleports from chorus item usage.", category = ModuleCategory.EXPLOIT)
public class ModuleChorusTweaks extends Module {
    // Misc.
    public static ValueNumber settingMaximumDelay = new ValueNumber("Maximum Delay", "MaximumDelay", "Max. delay for chorus blink.", 1f, 0f, 10f);
    public static ValueBoolean settingNoPosLook = new ValueBoolean("No Pos Look", "NoPosLook", "No pos look packet.", false);
    public static ValueBind settingAction = new ValueBind("Action", "Action", "Make the action.", -1);
    public static ValueColor settingColor = new ValueColor("Color", "Color", "Color mode for blink chorus.", Color.PINK);
    public static ValueNumber settingLineAlpha = new ValueNumber("Line Alpha", "LineAlpha", "Sets line alpha.", 255, 0, 255);
    public static ValueNumber settingLineSize = new ValueNumber("Line Size", "LineSize", "Size of line.", 1f, 1f, 5f);

    private final List<CPacketPlayer> packetPlayerList = new ArrayList<>();
    private final List<CPacketConfirmTeleport> packetConfirmTeleportList = new ArrayList<>();

    private BlockPos positionToTeleport;

    private int alphaSolid;
    private int alphaLine;

    private final TurokTick delay = new TurokTick();

    private boolean isRollback;
    private boolean isAte;

    private double lastPosX;
    private double lastPosY;
    private double lastPosZ;

    @Override
    public void onRender3D() {
        if (NullUtil.isPlayerWorld()) {
            return;
        }

        if (this.positionToTeleport != null) {
            this.alphaSolid = (int) TurokMath.lerp(this.alphaSolid, settingColor.getA(), Onepop.getClientEventManager().getCurrentRender3DPartialTicks());
            this.alphaLine = (int) TurokMath.lerp(this.alphaLine, settingLineAlpha.getValue().intValue(), Onepop.getClientEventManager().getCurrentRender3DPartialTicks());

            RenderUtil.drawSolidBlock(camera, this.positionToTeleport.x + 0.2, this.positionToTeleport.y + 1f, this.positionToTeleport.z - 0.2, 0.8, 2, 0.8, settingColor.getColor(this.alphaSolid));
            RenderUtil.drawOutlineBlock(camera, this.positionToTeleport.x + 0.2, this.positionToTeleport.y + 1f, this.positionToTeleport.z - 0.2, 0.8, 2, 0.8, settingLineSize.getValue().floatValue(), settingColor.getColor(this.alphaLine));
        } else {
            this.alphaSolid = (int) TurokMath.lerp(this.alphaSolid, 0, Onepop.getClientEventManager().getCurrentRender3DPartialTicks());
            this.alphaLine = (int) TurokMath.lerp(this.alphaLine, 0, Onepop.getClientEventManager().getCurrentRender3DPartialTicks());
        }
    }

    @Listener
    public void onRunTickEvent(RunTickEvent event) {
        if (NullUtil.isPlayerWorld()) {
            return;
        }

        if (mc.player.isHandActive() && mc.player.getHeldItem(mc.player.getActiveHand()).getItem() instanceof ItemChorusFruit && mc.player.getItemInUseMaxCount() >= 31) {
            this.print("New chorus ate.");

            this.setAte();
            this.syncLastPos();
        }

        if (this.isChorusAte() && this.isRollback && ((int) mc.player.posX != (int) (int) this.lastPosX || (int) mc.player.posY != (int) this.lastPosY || (int) mc.player.posZ != (int) this.lastPosZ)) {
            mc.player.setPosition(this.lastPosX, this.lastPosY, this.lastPosZ);

            this.isRollback = false;
        }

        if (settingAction.getValue()) {
            if (this.packetConfirmTeleportList.isEmpty() && this.packetPlayerList.isEmpty()) {
                this.print("No chorus ate!");
            } else {
                for (CPacketPlayer packets : this.packetPlayerList) {
                    mc.player.connection.sendPacket(packets);
                }

                this.packetPlayerList.clear();

                for (CPacketConfirmTeleport packets : this.packetConfirmTeleportList) {
                    mc.player.connection.sendPacket(packets);
                }

                this.packetConfirmTeleportList.clear();

                this.print("Chorus position selected.");
            }

            this.unsetAte();

            settingAction.setValue(false);
        }
    }

    @Listener
    public void onPacketReceive(PacketEvent.Receive event) {
        if (event.getPacket() instanceof SPacketSoundEffect) {
            SPacketSoundEffect packet = (SPacketSoundEffect) event.getPacket();

            if (packet.getSound() == SoundEvents.ENTITY_ENDERMEN_TELEPORT) {
                this.positionToTeleport = new BlockPos(packet.getX(), packet.getY(), packet.getZ());

                this.print("Chorus position: " + packet.getX() + "x " + packet.getY() + "y " + packet.getZ() + "z");
            }
        } if (event.getPacket() instanceof SPacketPlayerPosLook && this.isChorusAte()) {
            this.isRollback = true;

            if (settingNoPosLook.getValue()) {
                event.setCanceled(true);
            }
        }
    }

    @Listener
    public void onSendPacketEvent(PacketEvent.Send event) {
        if (this.isChorusAte() && !this.delay.isPassedMS(settingMaximumDelay.getValue().floatValue() * 1000f)) {
            if (event.getPacket() instanceof CPacketPlayer) {
                event.setCanceled(true);

                final CPacketPlayer packet = (CPacketPlayer) event.getPacket();
                this.packetPlayerList.add(packet);
            }

            if (event.getPacket() instanceof CPacketConfirmTeleport) {
                event.setCanceled(true);

                final CPacketConfirmTeleport packet = (CPacketConfirmTeleport) event.getPacket();
                this.packetConfirmTeleportList.add(packet);
            }
        }
    }

    public void setAte() {
        this.packetConfirmTeleportList.clear();
        this.packetPlayerList.clear();

        this.isAte = true;
        this.delay.reset();
    }

    public void unsetAte() {
        this.isAte = false;
        this.positionToTeleport = null;
    }

    public boolean isChorusAte() {
        return isAte;
    }

    public void syncLastPos() {
        this.lastPosX = mc.player.posX;
        this.lastPosY = mc.player.posY;
        this.lastPosZ = mc.player.posZ;
    }
}