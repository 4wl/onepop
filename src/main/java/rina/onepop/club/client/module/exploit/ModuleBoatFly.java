package rina.onepop.club.client.module.exploit;

import net.minecraft.entity.item.EntityBoat;
import net.minecraft.network.play.server.SPacketEntityTeleport;
import net.minecraft.network.play.server.SPacketPlayerPosLook;
import net.minecraft.util.math.MathHelper;
import rina.onepop.club.api.module.Module;
import rina.onepop.club.api.module.impl.ModuleCategory;
import rina.onepop.club.api.module.registry.Registry;
import rina.onepop.club.api.setting.value.ValueBoolean;
import rina.onepop.club.api.util.client.NullUtil;
import rina.onepop.club.client.event.client.RunTickEvent;
import rina.onepop.club.client.event.network.PacketEvent;
import team.stiff.pomelo.impl.annotated.handler.annotation.Listener;

/**
 * @author SrRina
 * @since 22/05/2021 at 02:56
 *
 * TODO: Speed increase.
 **/
@Registry(name = "Boat Fly", tag = "BoatFly", description = "Fly with a boat.", category = ModuleCategory.EXPLOIT)
public class ModuleBoatFly extends Module {
    public static ValueBoolean settingCancelTeleport = new ValueBoolean("Cancel Teleport", "CancelTeleport", "Interrput forced teleport.", false);
    public static ValueBoolean settingAirJump = new ValueBoolean("Air Jump", "AirJump", "Make air jumps.", false);
    public static ValueBoolean settingIncrease = new ValueBoolean("Increase", "Increase", "Increase speed.", false);

    private boolean isRidingAnBoat;

    @Listener
    public void onPacketReceive(PacketEvent.Receive event) {
        if (event.getPacket() instanceof SPacketPlayerPosLook && this.isRidingAnBoat && settingCancelTeleport.getValue()) {
            event.setCanceled(true);
        }

        if (event.getPacket() instanceof SPacketEntityTeleport && mc.player.getRidingEntity() != null && this.isRidingAnBoat && ((SPacketEntityTeleport) event.getPacket()).getEntityId() == mc.player.getRidingEntity().entityId) {
            event.setCanceled(true);
        }
    }
    
    @Listener
    public void onTick(RunTickEvent event) {
        if (NullUtil.isPlayerWorld()) {
            return;
        }

        if (!mc.player.isRiding() || mc.player.getRidingEntity() == null || !(mc.player.getRidingEntity() instanceof EntityBoat)) {
            this.isRidingAnBoat = false;

            return;
        }

        this.isRidingAnBoat = true;

        EntityBoat boat = (EntityBoat) mc.player.getRidingEntity();
        boat.setNoGravity(!settingAirJump.getValue());
        
        if (!settingAirJump.getValue()) {
            boat.motionY = 0f;
        }

        if (mc.gameSettings.keyBindJump.isKeyDown()) {
            boat.motionY += 0.1f;
        }

        if (mc.gameSettings.keyBindSneak.isKeyDown() && !settingAirJump.getValue()) {
            boat.motionY -= 0.1f;
        }


        if (mc.gameSettings.keyBindForward.isKeyDown() && settingIncrease.getValue()) {
            float f = mc.player.rotationYaw * 0.017453292F;

            boat.motionX -= MathHelper.sin(f) * (0.2f);
            boat.motionY += MathHelper.cos(f) * (0.2f);
        }

        mc.player.motionY = 0;
    }
}
